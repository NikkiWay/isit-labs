import telebot
from telebot import types
import os
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–ª—é–¥–∞
image_urls = {
    # –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è
    "–ü–∏—Ü—Ü–∞": "https://upload.wikimedia.org/wikipedia/commons/0/05/Pizza_with_tomatoes.jpg",
    "–ü–∞—Å—Ç–∞": "https://upload.wikimedia.org/wikipedia/commons/1/11/Spaghetti_al_Pomodoro.JPG",
    "–¢–∏—Ä–∞–º–∏—Å—É": "https://upload.wikimedia.org/wikipedia/commons/5/5b/Tiramisu_-_Italian_Dessert.jpg",
    "–†–∏–∑–æ—Ç—Ç–æ": "https://upload.wikimedia.org/wikipedia/commons/e/e6/Risotto_ai_funghi.jpg",
    "–õ–∞–∑–∞–Ω—å—è": "https://upload.wikimedia.org/wikipedia/commons/b/bc/Lasagna_serving.jpg",

    # –Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è
    "–°—É—à–∏": "https://upload.wikimedia.org/wikipedia/commons/6/60/Sushi_platter.jpg",
    "–†–∞–º–µ–Ω": "https://upload.wikimedia.org/wikipedia/commons/1/15/Tonkotsu_ramen_by_ayustety_in_Tokyo.jpg",
    "–¢–µ–º–ø—É—Ä–∞": "https://upload.wikimedia.org/wikipedia/commons/6/6b/Tendon.jpg",
    "–Ø–∫–∏—Ç–æ—Ä–∏": "https://upload.wikimedia.org/wikipedia/commons/0/0b/Yakitori.jpg",
    "–ú–æ—Ç–∏": "https://upload.wikimedia.org/wikipedia/commons/3/34/Mochi.jpg",

    # –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è
    "–¢–∞–∫–æ": "https://upload.wikimedia.org/wikipedia/commons/5/54/Tacos_de_carnitas.jpg",
    "–ë—É—Ä—Ä–∏—Ç–æ": "https://upload.wikimedia.org/wikipedia/commons/0/05/Burrito.JPG",
    "–ù–∞—á–æ—Å": "https://upload.wikimedia.org/wikipedia/commons/6/69/Nachos_with_beef_and_cheese.jpg",
    "–ì—É–∞–∫–∞–º–æ–ª–µ": "https://upload.wikimedia.org/wikipedia/commons/b/b2/Guacamole.jpg",
    "–ö–µ—Å–∞–¥–∏–ª—å—è": "https://upload.wikimedia.org/wikipedia/commons/7/7e/Quesadilla.jpg",

    # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –∫—É—Ö–Ω—è
    "–ö—Ä—É–∞—Å—Å–∞–Ω": "https://upload.wikimedia.org/wikipedia/commons/a/a5/Croissant-Petr-Kratochvil.jpg",
    "–°—É–ø-–ø—é—Ä–µ": "https://upload.wikimedia.org/wikipedia/commons/6/64/Butternut_squash_soup.jpg",
    "–ö–∏—à": "https://upload.wikimedia.org/wikipedia/commons/3/38/Quiche.jpg",
    "–ö—Ä–µ–º-–±—Ä—é–ª–µ": "https://upload.wikimedia.org/wikipedia/commons/f/f4/Creme_brulee.jpg",
    "–†–∞—Ç–∞—Ç—É–π": "https://upload.wikimedia.org/wikipedia/commons/2/2f/Ratatouille_by_cookingangel.jpg"
}

user_data = {}

def init_user(user_id):
    if user_id not in user_data:
        user_data[user_id] = {
            'counter': {dish: 0 for dish in image_urls},
            'history': []
        }

def main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "–Ø–ø–æ–Ω—Å–∫–∞—è", "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è")
    return keyboard

def sub_menu(category):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    dishes = {
        "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è": ["–ü–∏—Ü—Ü–∞", "–ü–∞—Å—Ç–∞", "–¢–∏—Ä–∞–º–∏—Å—É", "–†–∏–∑–æ—Ç—Ç–æ", "–õ–∞–∑–∞–Ω—å—è"],
        "–Ø–ø–æ–Ω—Å–∫–∞—è": ["–°—É—à–∏", "–†–∞–º–µ–Ω", "–¢–µ–º–ø—É—Ä–∞", "–Ø–∫–∏—Ç–æ—Ä–∏", "–ú–æ—Ç–∏"],
        "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è": ["–¢–∞–∫–æ", "–ë—É—Ä—Ä–∏—Ç–æ", "–ù–∞—á–æ—Å", "–ì—É–∞–∫–∞–º–æ–ª–µ", "–ö–µ—Å–∞–¥–∏–ª—å—è"],
        "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è": ["–ö—Ä—É–∞—Å—Å–∞–Ω", "–°—É–ø-–ø—é—Ä–µ", "–ö–∏—à", "–ö—Ä–µ–º-–±—Ä—é–ª–µ", "–†–∞—Ç–∞—Ç—É–π"]
    }
    keyboard.add(*dishes.get(category, []), "–ù–∞–∑–∞–¥")
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    init_user(message.chat.id)
    user_data[message.chat.id]['history'].clear()
    user_data[message.chat.id]['history'].append('main')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é –º–∏—Ä–∞:", reply_markup=main_menu())

@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.chat.id
    init_user(user_id)

    if message.text == "–ù–∞–∑–∞–¥":
        if len(user_data[user_id]['history']) > 1:
            user_data[user_id]['history'].pop()
            prev = user_data[user_id]['history'][-1]
            if prev == "main":
                bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
            else:
                bot.send_message(user_id, f"–ö—É—Ö–Ω—è: {prev}", reply_markup=sub_menu(prev))
        return

    if message.text in image_urls:
        user_data[user_id]['counter'][message.text] += 1
        try:
            bot.send_photo(
                user_id,
                photo=image_urls[message.text],
                caption=f"üçΩÔ∏è {message.text}\nüìä –ù–∞–∂–∞—Ç–∏–π: {user_data[user_id]['counter'][message.text]}\n‚ÑπÔ∏è {get_description(message.text)}"
            )
        except:
            bot.send_message(
                user_id,
                f"{message.text} (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)\nüìä –ù–∞–∂–∞—Ç–∏–π: {user_data[user_id]['counter'][message.text]}\n‚ÑπÔ∏è {get_description(message.text)}"
            )
    elif message.text in ["–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "–Ø–ø–æ–Ω—Å–∫–∞—è", "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è"]:
        user_data[user_id]['history'].append(message.text)
        bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {message.text} –∫—É—Ö–Ω—è", reply_markup=sub_menu(message.text))

def get_description(dish):
    desc = {
        "–ü–∏—Ü—Ü–∞": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ –±–ª—é–¥–æ —Å —Å—ã—Ä–æ–º, —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –Ω–∞—á–∏–Ω–∫–æ–π",
        "–ü–∞—Å—Ç–∞": "–ú–∞–∫–∞—Ä–æ–Ω–Ω–æ–µ –±–ª—é–¥–æ, –ø–æ–¥–∞–≤–∞–µ–º–æ–µ —Å —Å–æ—É—Å–∞–º–∏",
        "–¢–∏—Ä–∞–º–∏—Å—É": "–°–ª–æ–π –¥–µ—Å–µ—Ä—Ç–∞ —Å –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ, –∫–æ—Ñ–µ –∏ –∫–∞–∫–∞–æ",
        "–†–∏–∑–æ—Ç—Ç–æ": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–æ–µ –±–ª—é–¥–æ –∏–∑ —Ä–∏—Å–∞ –Ω–∞ –±—É–ª—å–æ–Ω–µ",
        "–õ–∞–∑–∞–Ω—å—è": "–°–ª–æ—ë–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ –ø–∞—Å—Ç—ã, —Å–æ—É—Å–∞ –∏ —Å—ã—Ä–∞",
        "–°—É—à–∏": "–†–∏—Å —Å —Ä—ã–±–æ–π, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏–ª–∏ –æ–≤–æ—â–∞–º–∏",
        "–†–∞–º–µ–Ω": "–Ø–ø–æ–Ω—Å–∫–∏–π —Å—É–ø —Å –ª–∞–ø—à–æ–π –∏ –º—è—Å–æ–º",
        "–¢–µ–º–ø—É—Ä–∞": "–û–±–∂–∞—Ä–µ–Ω–Ω—ã–µ –≤–æ —Ñ—Ä–∏—Ç—é—Ä–µ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏",
        "–Ø–∫–∏—Ç–æ—Ä–∏": "–®–∞—à–ª—ã—á–∫–∏ –∏–∑ –∫—É—Ä–∏—Ü—ã –Ω–∞ —à–ø–∞–∂–∫–∞—Ö",
        "–ú–æ—Ç–∏": "–°–ª–∞–¥–∫–∏–π —Ä–∏—Å–æ–≤—ã–π –¥–µ—Å–µ—Ä—Ç",
        "–¢–∞–∫–æ": "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è –ª–µ–ø—ë—à–∫–∞ —Å –Ω–∞—á–∏–Ω–∫–æ–π",
        "–ë—É—Ä—Ä–∏—Ç–æ": "–†—É–ª–µ—Ç –∏–∑ —Ç–æ—Ä—Ç–∏–ª—å–∏ —Å –º—è—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏",
        "–ù–∞—á–æ—Å": "–ö—É–∫—É—Ä—É–∑–Ω—ã–µ —á–∏–ø—Å—ã —Å —Å—ã—Ä–æ–º –∏ —Å–æ—É—Å–∞–º–∏",
        "–ì—É–∞–∫–∞–º–æ–ª–µ": "–ü–∞—Å—Ç–∞ –∏–∑ –∞–≤–æ–∫–∞–¥–æ —Å –ª—É–∫–æ–º –∏ –ª–∞–π–º–æ–º",
        "–ö–µ—Å–∞–¥–∏–ª—å—è": "–ñ–∞—Ä–µ–Ω–∞—è –ª–µ–ø—ë—à–∫–∞ —Å —Å—ã—Ä–æ–º –∏ –Ω–∞—á–∏–Ω–∫–æ–π",
        "–ö—Ä—É–∞—Å—Å–∞–Ω": "–°–ª–æ—ë–Ω–∞—è –±—É–ª–æ—á–∫–∞ –≤ —Ñ–æ—Ä–º–µ –ø–æ–ª—É–º–µ—Å—è—Ü–∞",
        "–°—É–ø-–ø—é—Ä–µ": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∫—Ä–µ–º-—Å—É–ø –∏–∑ –æ–≤–æ—â–µ–π",
        "–ö–∏—à": "–ù–µ—Å–ª–∞–¥–∫–∏–π –ø–∏—Ä–æ–≥ —Å –Ω–∞—á–∏–Ω–∫–æ–π –∏ —è–∏—á–Ω–æ–π –∑–∞–ª–∏–≤–∫–æ–π",
        "–ö—Ä–µ–º-–±—Ä—é–ª–µ": "–°–ª–∏–≤–æ—á–Ω—ã–π –¥–µ—Å–µ—Ä—Ç —Å –∫–∞—Ä–∞–º–µ–ª—å–Ω–æ–π –∫–æ—Ä–∫–æ–π",
        "–†–∞—Ç–∞—Ç—É–π": "–û–≤–æ—â–Ω–æ–µ —Ä–∞–≥—É —Ä–æ–¥–æ–º –∏–∑ –ü—Ä–æ–≤–∞–Ω—Å–∞"
    }
    return desc.get(dish, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

if __name__ == '__main__':
    bot.polling(none_stop=True)
