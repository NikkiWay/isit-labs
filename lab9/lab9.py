from telebot import TeleBot, types
import threading
import os
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = TeleBot(TELEGRAM_TOKEN)

image_urls = {
    # –ï–≤—Ä–æ–ø–∞
    "–õ—É–≤—Ä": "https://upload.wikimedia.org/wikipedia/commons/a/a6/Louvre_Museum_Wikimedia_Commons.jpg",
    "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –º—É–∑–µ–π": "https://upload.wikimedia.org/wikipedia/commons/0/01/British_Museum_from_NE_2.JPG",
    "–ü—Ä–∞–¥–æ": "https://upload.wikimedia.org/wikipedia/commons/7/7c/Madrid_-_Museo_del_Prado_1.jpg",
    "–†–µ–π–∫—Å–º—é—Å–µ—É–º": "https://upload.wikimedia.org/wikipedia/commons/2/27/Rijksmuseum.jpg",
    "–£—Ñ—Ñ–∏—Ü–∏": "https://upload.wikimedia.org/wikipedia/commons/5/59/Uffizi_Gallery.jpg",

    # –ê–∑–∏—è
    "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑–µ–π –¢–æ–∫–∏–æ": "https://upload.wikimedia.org/wikipedia/commons/5/54/Tokyo_National_Museum_Honkan_2010.JPG",
    "–ü–µ–∫–∏–Ω—Å–∫–∏–π –º—É–∑–µ–π": "https://upload.wikimedia.org/wikipedia/commons/d/d0/National_Museum_of_China_2018.jpg",
    "–ú—É–∑–µ–π –ò—Å–∫—É—Å—Å—Ç–≤ –ì—É–≥–≥–µ–Ω—Ö–∞–π–º–∞ (–ê–±—É-–î–∞–±–∏)": "https://upload.wikimedia.org/wikipedia/commons/0/03/Guggenheim_Abu_Dhabi_model.jpg",
    "–ò–Ω–¥–∏–π—Å–∫–∏–π –º—É–∑–µ–π": "https://upload.wikimedia.org/wikipedia/commons/3/3b/Indian_Museum_Kolkata.jpg",
    "–ú—É–∑–µ–π –ò—Å–ª–∞–º—Å–∫–æ–≥–æ –ò—Å–∫—É—Å—Å—Ç–≤–∞ (–î–æ—Ö–∞)": "https://upload.wikimedia.org/wikipedia/commons/8/8e/Museum_of_Islamic_Art%2C_Doha%2C_Qatar.jpg",

    # –ê–º–µ—Ä–∏–∫–∞
    "–ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω-–º—É–∑–µ–π": "https://upload.wikimedia.org/wikipedia/commons/9/97/The_Metropolitan_Museum_of_Art_%28The_Met%29_-_New_York_City.jpg",
    "–ú–æ–ú–ê": "https://upload.wikimedia.org/wikipedia/commons/b/b1/Museum_of_Modern_Art_%28MoMA%29_-_New_York_City.jpg",
    "–°–º–∏—Ç—Å–æ–Ω–æ–≤—Å–∫–∏–π –º—É–∑–µ–π": "https://upload.wikimedia.org/wikipedia/commons/8/81/Smithsonian_Castle.JPG",
    "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π –ß–∏–∫–∞–≥–æ": "https://upload.wikimedia.org/wikipedia/commons/6/6e/Art_Institute_of_Chicago_facade.jpg",
    "–ú—É–∑–µ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (–ù—å—é-–ô–æ—Ä–∫)": "https://upload.wikimedia.org/wikipedia/commons/e/e1/American_Museum_of_Natural_History.jpg",

    # –†–æ—Å—Å–∏—è
    "–≠—Ä–º–∏—Ç–∞–∂": "https://upload.wikimedia.org/wikipedia/commons/b/bf/Hermitage_Museum%2C_St._Petersburg.jpg",
    "–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è": "https://upload.wikimedia.org/wikipedia/commons/4/4a/Tretyakov_Gallery.jpg",
    "–ü—É—à–∫–∏–Ω—Å–∫–∏–π –º—É–∑–µ–π": "https://upload.wikimedia.org/wikipedia/commons/d/d1/Pushkin_Museum.jpg",
    "–†—É—Å—Å–∫–∏–π –º—É–∑–µ–π": "https://upload.wikimedia.org/wikipedia/commons/1/1d/Russian_Museum_Saint_Petersburg.jpg",
    "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π": "https://upload.wikimedia.org/wikipedia/commons/f/f2/Polytechnic_Museum_Moscow.jpg"
}

descriptions = {
    "–õ—É–≤—Ä": "–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π –º–∏—Ä–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –ü–∞—Ä–∏–∂–µ.",
    "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –º—É–∑–µ–π": "–û–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ä–µ–π—à–∏—Ö –º—É–∑–µ–µ–≤ –º–∏—Ä–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –õ–æ–Ω–¥–æ–Ω–µ.",
    "–ü—Ä–∞–¥–æ": "–ì–ª–∞–≤–Ω—ã–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π –ò—Å–ø–∞–Ω–∏–∏, –≤ –ú–∞–¥—Ä–∏–¥–µ.",
    "–†–µ–π–∫—Å–º—é—Å–µ—É–º": "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑–µ–π –∏—Å–∫—É—Å—Å—Ç–≤–∞ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤, –ê–º—Å—Ç–µ—Ä–¥–∞–º.",
    "–£—Ñ—Ñ–∏—Ü–∏": "–ó–Ω–∞–º–µ–Ω–∏—Ç–∞—è –≥–∞–ª–µ—Ä–µ—è –≤–æ –§–ª–æ—Ä–µ–Ω—Ü–∏–∏ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è.",
    "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑–µ–π –¢–æ–∫–∏–æ": "–°—Ç–∞—Ä–µ–π—à–∏–π –∏ –∫—Ä—É–ø–Ω–µ–π—à–∏–π –º—É–∑–µ–π –Ø–ø–æ–Ω–∏–∏.",
    "–ü–µ–∫–∏–Ω—Å–∫–∏–π –º—É–∑–µ–π": "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑–µ–π –ö–∏—Ç–∞—è, –Ω–∞ –ø–ª–æ—â–∞–¥–∏ –¢—è–Ω—å–∞–Ω—å–º—ç–Ω—å.",
    "–ú—É–∑–µ–π –ò—Å–∫—É—Å—Å—Ç–≤ –ì—É–≥–≥–µ–Ω—Ö–∞–π–º–∞ (–ê–±—É-–î–∞–±–∏)": "–§–∏–ª–∏–∞–ª –∑–Ω–∞–º–µ–Ω–∏—Ç–æ–π —Å–µ—Ç–∏ –º—É–∑–µ–µ–≤ –ì—É–≥–≥–µ–Ω—Ö–∞–π–º–∞.",
    "–ò–Ω–¥–∏–π—Å–∫–∏–π –º—É–∑–µ–π": "–û–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ä–µ–π—à–∏—Ö –º—É–∑–µ–µ–≤ –ê–∑–∏–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –ö–∞–ª—å–∫—É—Ç—Ç–µ.",
    "–ú—É–∑–µ–π –ò—Å–ª–∞–º—Å–∫–æ–≥–æ –ò—Å–∫—É—Å—Å—Ç–≤–∞ (–î–æ—Ö–∞)": "–í–µ–¥—É—â–∏–π –º—É–∑–µ–π –∏—Å–ª–∞–º—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –≤ –ö–∞—Ç–∞—Ä–µ.",
    "–ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω-–º—É–∑–µ–π": "–û–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –º—É–∑–µ–µ–≤ –°–®–ê, –ù—å—é-–ô–æ—Ä–∫.",
    "–ú–æ–ú–ê": "–ú—É–∑–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –≤ –ù—å—é-–ô–æ—Ä–∫–µ.",
    "–°–º–∏—Ç—Å–æ–Ω–æ–≤—Å–∫–∏–π –º—É–∑–µ–π": "–ö–æ–º–ø–ª–µ–∫—Å –º—É–∑–µ–µ–≤ –≤ –í–∞—à–∏–Ω–≥—Ç–æ–Ω–µ.",
    "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π –ß–∏–∫–∞–≥–æ": "–ö—Ä—É–ø–Ω—ã–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π –≤ –°–®–ê.",
    "–ú—É–∑–µ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (–ù—å—é-–ô–æ—Ä–∫)": "–û–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –Ω–∞—É—á–Ω—ã—Ö –º—É–∑–µ–µ–≤ –º–∏—Ä–∞.",
    "–≠—Ä–º–∏—Ç–∞–∂": "–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ-–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π –†–æ—Å—Å–∏–∏.",
    "–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è": "–ì–ª–∞–≤–Ω—ã–π –º—É–∑–µ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞.",
    "–ü—É—à–∫–∏–Ω—Å–∫–∏–π –º—É–∑–µ–π": "–ú—É–∑–µ–π –∏–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–∫—É—Å—Å—Ç–≤ –≤ –ú–æ—Å–∫–≤–µ.",
    "–†—É—Å—Å–∫–∏–π –º—É–∑–µ–π": "–ü–µ—Ä–≤—ã–π –≤ —Å—Ç—Ä–∞–Ω–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞.",
    "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π": "–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π –†–æ—Å—Å–∏–∏."
}

user_data = {}
lock = threading.Lock()


def init_user(user_id):
    with lock:
        if user_id not in user_data:
            user_data[user_id] = {
                'counter': {name: 0 for name in image_urls},
                'menu_message_id': None
            }

def main_menu():
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton("–ï–≤—Ä–æ–ø–∞", callback_data="region_–ï–≤—Ä–æ–ø–∞"),
        types.InlineKeyboardButton("–ê–∑–∏—è", callback_data="region_–ê–∑–∏—è"),
        types.InlineKeyboardButton("–ê–º–µ—Ä–∏–∫–∞", callback_data="region_–ê–º–µ—Ä–∏–∫–∞"),
        types.InlineKeyboardButton("–†–æ—Å—Å–∏—è", callback_data="region_–†–æ—Å—Å–∏—è")
    ]
    keyboard.add(*buttons[:2])
    keyboard.add(*buttons[2:])
    return keyboard

def sub_menu(region):
    regions = {
        "–ï–≤—Ä–æ–ø–∞": ["–õ—É–≤—Ä", "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –º—É–∑–µ–π", "–ü—Ä–∞–¥–æ", "–†–µ–π–∫—Å–º—é—Å–µ—É–º", "–£—Ñ—Ñ–∏—Ü–∏"],
        "–ê–∑–∏—è": ["–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑–µ–π –¢–æ–∫–∏–æ", "–ü–µ–∫–∏–Ω—Å–∫–∏–π –º—É–∑–µ–π", "–ú—É–∑–µ–π –ò—Å–∫—É—Å—Å—Ç–≤ –ì—É–≥–≥–µ–Ω—Ö–∞–π–º–∞ (–ê–±—É-–î–∞–±–∏)", "–ò–Ω–¥–∏–π—Å–∫–∏–π –º—É–∑–µ–π", "–ú—É–∑–µ–π –ò—Å–ª–∞–º—Å–∫–æ–≥–æ –ò—Å–∫—É—Å—Å—Ç–≤–∞ (–î–æ—Ö–∞)"],
        "–ê–º–µ—Ä–∏–∫–∞": ["–ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω-–º—É–∑–µ–π", "–ú–æ–ú–ê", "–°–º–∏—Ç—Å–æ–Ω–æ–≤—Å–∫–∏–π –º—É–∑–µ–π", "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π –ß–∏–∫–∞–≥–æ", "–ú—É–∑–µ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (–ù—å—é-–ô–æ—Ä–∫)"],
        "–†–æ—Å—Å–∏—è": ["–≠—Ä–º–∏—Ç–∞–∂", "–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è", "–ü—É—à–∫–∏–Ω—Å–∫–∏–π –º—É–∑–µ–π", "–†—É—Å—Å–∫–∏–π –º—É–∑–µ–π", "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π"]
    }
    keyboard = types.InlineKeyboardMarkup()
    group = regions.get(region, [])
    for i in range(0, len(group), 3):
        row = group[i:i+3]
        keyboard.row(*[types.InlineKeyboardButton(m, callback_data=f"museum_{m}") for m in row])
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    init_user(message.chat.id)
    with lock:
        if user_data[message.chat.id]['menu_message_id']:
            try:
                bot.delete_message(message.chat.id, user_data[message.chat.id]['menu_message_id'])
            except:
                pass

    msg = bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏ –º—É–∑–µ–π:",
        reply_markup=main_menu()
    )
    with lock:
        user_data[message.chat.id]['menu_message_id'] = msg.message_id

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.message.chat.id
    init_user(user_id)

    try:
        if call.data.startswith("region_"):
            region = call.data.split("_")[1]
            bot.edit_message_text(
                chat_id=user_id,
                message_id=call.message.message_id,
                text=f"–†–µ–≥–∏–æ–Ω: {region}",
                reply_markup=sub_menu(region)
            )

        elif call.data.startswith("museum_"):
            museum = call.data.split("_", 1)[1]
            with lock:
                user_data[user_id]['counter'][museum] += 1

            try:
                bot.edit_message_media(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    media=types.InputMediaPhoto(
                        media=image_urls[museum],
                        caption=f"üèõÔ∏è {museum}\nüìä –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {user_data[user_id]['counter'][museum]}\n‚ÑπÔ∏è {descriptions.get(museum, '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
                    )
                )
            except:
                bot.edit_message_text(
                    chat_id=user_id,
                    message_id=call.message.message_id,
                    text=f"üèõÔ∏è {museum}\nüìä –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {user_data[user_id]['counter'][museum]}\n‚ÑπÔ∏è {descriptions.get(museum, '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
                )

            msg = bot.send_message(
                user_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏ –º—É–∑–µ–π:",
                reply_markup=main_menu()
            )
            with lock:
                user_data[user_id]['menu_message_id'] = msg.message_id

            bot.answer_callback_query(call.id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == '__main__':
    bot.polling(none_stop=True)
